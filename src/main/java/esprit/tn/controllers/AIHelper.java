
package esprit.tn.controllers;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

public class AIHelper {
   // Stocke la cl√© API n√©cessaire pour authentifier les requ√™tes aupr√®s de l'API Google.
    private static final String API_KEY = "AIzaSyB5HQtWxwdLaAXwsfE9RpRM0uAVgtKCS4M";
    //Contient l‚ÄôURL de l‚ÄôAPI pour interagir avec Gemini 2.0 Flash
    private static final String API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=" + API_KEY;
//Elle prend un prompt (String) comme param√®tre, qui repr√©sente la question ou la demande envoy√©e √† l‚ÄôIA.
    public static String generateContent(String prompt) throws IOException {
        //Cr√©e une connexion HTTP vers API_URL.
        URL url = new URL(API_URL);
        //Ouvre une connexion vers l'URL sp√©cifi√©e.
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        //D√©finit la m√©thode HTTP POST (n√©cessaire pour envoyer des donn√©es √† l‚ÄôAPI).
        connection.setRequestMethod("POST");
        //Sp√©cifie que le contenu envoy√© sera du JSON (Content-Type: application/json
        connection.setRequestProperty("Content-Type", "application/json");
        //Active la sortie (setDoOutput(true)) pour pouvoir √©crire dans la requ√™te.
        connection.setDoOutput(true);
//Construit un JSON au format attendu par l‚ÄôAPI.
        //Cr√©e une cha√Æne JSON repr√©sentant le corps de la requ√™te.
        String jsonInputString = "{\"contents\": [{\"parts\":[{\"text\": \"" + prompt + "\"}]}]}";
//Ce flux permet d'√©crire des donn√©es dans la requ√™te HTTP.
        //on va envoyer des donn√©es au serveur.
        //Cela permet d'envoyer un JSON dans une requ√™te POST (ou PUT), souvent utilis√© dans les APIs REST.
        try (OutputStream os = connection.getOutputStream()) {
            //Convertit la cha√Æne JSON (jsonInputString) en un tableau de bytes encod√©
            //en UTF-8 (n√©cessaire pour le transfert r√©seau)
            byte[] input = jsonInputString.getBytes("utf-8");
            os.write(input, 0, input.length);
        }
//Lecture de la r√©ponse du serveur
        //connection.getInputStream() ‚Üí Ouvre un flux d'entr√©e (InputStream) pour lire la r√©ponse du serveur.
        //üîπ new InputStreamReader(..., "utf-8") ‚Üí Convertit le flux d'octets en caract√®res lisibles en UTF-8.
        //üîπ BufferedReader ‚Üí Permet de lire la r√©ponse ligne par ligne de mani√®re optimis√©e.
        try (BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), "utf-8"))) {
            StringBuilder response = new StringBuilder();
            String responseLine = null;
            // Lit la r√©ponse ligne par ligne jusqu'√† la fin.
            while ((responseLine = br.readLine()) != null) {
                //Supprime les espaces inutiles et stocke la r√©ponse dans un StringBuilder
                response.append(responseLine.trim());
            }
            //Retourne la r√©ponse compl√®te sous forme de String.
            return response.toString();
        }
    }
}