

package esprit.tn.controllers;

import esprit.tn.entities.Evenement;
import esprit.tn.entities.Role;
import esprit.tn.services.ServiceEvenement;
import esprit.tn.utils.DateUtilEvent;
import esprit.tn.utils.NominatimAPI;
import esprit.tn.utils.SessionManager;
import esprit.tn.utils.WeatherAPI;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Modality;
import javafx.stage.Stage;

import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

public class AfficherEvenementController {

    @FXML
    private ListView<Evenement> lv_event;

    @FXML
    private TextField searchField;

    @FXML
    private Button searchButton;

    @FXML
    private TextField txtRechercheEvent;

    private ObservableList<Evenement> observableList;

    @FXML
    private Button btnAjouterEvent;

    @FXML
    private Button btnretourdashRH;

    @FXML
    void initialize() {
        ServiceEvenement serviceEvenement = new ServiceEvenement();

        // V√©rifie si le r√¥le de l'utilisateur est RH, sinon cache le bouton
        if (!SessionManager.getRole().equals(Role.RH.name())) {
            btnAjouterEvent.setVisible(false);
            btnretourdashRH.setVisible(false);
        }

        try {
            // on a une ListView<Evenement> (lv_event), qui doit afficher une liste d'√©v√©nements
            // r√©cup√©r√©s depuis la base de donn√©es.
            //Cependant, une simple List<Evenement> ne permettrait pas d'actualiser
            // l'affichage automatiquement si des √©v√©nements sont modifi√©s.
            List<Evenement> evenementList = serviceEvenement.afficher();
            observableList = FXCollections.observableList(evenementList);
            lv_event.setItems(observableList);

            // Configuration de la cellule personnalis√©e pour afficher les √©v√©nements
            lv_event.setCellFactory(param -> new ListCell<Evenement>() {


                @Override
                protected void updateItem(Evenement evenement, boolean empty) {
                    super.updateItem(evenement, empty);
                    if (empty || evenement == null) {
                        setText(null);
                        setGraphic(null);
                    } else {
                        // Cr√©er un VBox pour organiser les informations de l'√©v√©nement
                        VBox vbox = new VBox(5);
                        vbox.setPadding(new Insets(10));

                        // Nom de l'√©v√©nement
                        Text nomEvent = new Text("Nom: " + evenement.getNomEvent());
                        nomEvent.getStyleClass().add("event-text");

                        // Description de l'√©v√©nement
                        Text descEvent = new Text("Description: " + evenement.getDescEvent());
                        descEvent.getStyleClass().add("event-text");

                        // Date de l'√©v√©nement
                        Text dateEvent = new Text("Date: " + evenement.getDateEvent());
                        dateEvent.getStyleClass().add("event-text");

                        // Lieu de l'√©v√©nement
                        Text lieuEvent = new Text("Lieu: " + evenement.getLieuEvent());
                        lieuEvent.getStyleClass().add("event-text");

                        // Capacit√© de l'√©v√©nement
                        Text capaciteEvent = new Text("Capacit√©: " + evenement.getCapaciteEvent());
                        capaciteEvent.getStyleClass().add("event-text");

                        // Calculer le message des jours restants ou si l'√©v√©nement est pass√©


                        //evenement.getDateEvent() retourne une date sous forme de java.sql.Date
                        // (qui est utilis√©e pour stocker des dates dans une base de donn√©es SQL).
                        //.toLocalDate() convertit cette java.sql.Date en un LocalDate, qui est une
                        // classe plus moderne de Java (Java 8+ avec java.time API).
                        //eventDate contiendra donc la date de l'√©v√©nement sous forme de LocalDate
                        LocalDate eventDate = evenement.getDateEvent().toLocalDate(); // Supposons que getDateEvent() retourne un java.sql.Date
                        //Cette m√©thode calcule le nombre de jours restants avant l'√©v√©nement et
                        // retourne un message format√© sous forme de String.
                        //Si aujourd'hui on est le 6 mars 2025 et que l'√©v√©nement est le 10 mars 2025, alors joursRestantsMessage pourrait √™tre :
                        //üëâ "L'√©v√©nement aura lieu dans 4 jours"
                        String joursRestantsMessage = DateUtilEvent.getDaysRemainingMessage(eventDate);
                        Text textJoursRestants = new Text(joursRestantsMessage);

                        // Appliquer un style diff√©rent en fonction du message
                        //La m√©thode getStyleClass() en JavaFX est utilis√©e pour acc√©der
                        // et manipuler la liste des classes CSS associ√©es √† un √©l√©ment graphique
                        if (joursRestantsMessage.contains("pass√©")) {
                            textJoursRestants.getStyleClass().add("event-passed-text"); // Style pour les √©v√©nements pass√©s
                        } else if (joursRestantsMessage.contains("aujourd'hui")) {
                            textJoursRestants.getStyleClass().add("event-today-text"); // Style pour les √©v√©nements aujourd'hui
                        } else {
                            textJoursRestants.getStyleClass().add("event-remaining-text"); // Style pour les √©v√©nements √† venir
                        }

                        // Ajouter les √©l√©ments au VBox
                        vbox.getChildren().addAll(nomEvent, descEvent, dateEvent, lieuEvent, capaciteEvent, textJoursRestants);

                        // Cr√©er un HBox pour les boutons
                        //Le nombre 10 pass√© √† HBox(10) repr√©sente l'espacement entre les √©l√©ments enfants de la HBox.
                        HBox hboxButtons = new HBox(10);
                        hboxButtons.setAlignment(Pos.CENTER_RIGHT);

                        // Bouton "Afficher sur la carte"
                        Button btnAfficherCarte = new Button("\uD83D\uDCCD");
                        btnAfficherCarte.setStyle("-fx-background-color: #0086b3; -fx-text-fill: white;");

                        btnAfficherCarte.setOnAction(event -> {
                            try {
                                //charger lmap
                                FXMLLoader loader = new FXMLLoader(getClass().getResource("/AfficherCarte.fxml"));
                                //root r√©cup√®re l'√©l√©ment racine de l'interface d√©finie dans le fichier FXML
                                Parent root = loader.load();
                                //permet de r√©cup√©rer le contr√¥leur associ√© au fichier FXML
                                AfficherCarteController carteController = loader.getController();
                                if (carteController == null) {
                                    System.out.println("Erreur : Le contr√¥leur AfficherCarteController est null !");
                                    return;
                                }

                                String coor = NominatimAPI.getCoordinates(evenement.getLieuEvent());
                                System.out.println("Coordonn√©es r√©cup√©r√©es pour " + evenement.getLieuEvent() + " : " + coor);

                                if (coor != null && !coor.isEmpty()) {
                                    //Cette √©tape consiste √† nettoyer la cha√Æne de caract√®res contenant les coordonn√©es
                                    // en supprimant les termes "Latitude: " et " Longitude: " ainsi que les espaces. Ensuite,
                                    // les coordonn√©es format√©es sont affich√©es dans la console pour faciliter le d√©bogage.
                                    coor = coor.replace("Latitude: ", "").replace(" Longitude: ", "").replace(" ", "");
                                    System.out.println("Coordonn√©es format√©es pour la carte : " + coor);
                                    //passer les coordonnees au controlleur
                                    carteController.initData(coor);
                                } else {
                                    System.out.println("Erreur : Impossible de r√©cup√©rer les coordonn√©es du lieu.");
                                }

                                Stage mapStage = new Stage();
                                mapStage.setTitle("Carte de l'√©v√©nement");
                                mapStage.setScene(new Scene(root));
                                //La m√©thode initModality(APPLICATION_MODAL) assure que la fen√™tre de la carte soit modale,
                                // c'est-√†-dire que
                                // l'utilisateur doit la fermer avant de pouvoir interagir avec les autres fen√™tres de l'application.
                                mapStage.initModality(Modality.APPLICATION_MODAL);
                                mapStage.showAndWait();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        });

                        // Ajouter le bouton "Afficher sur la carte" √† la HBox
                        hboxButtons.getChildren().add(btnAfficherCarte);

                        // Si l'utilisateur est RH, ajouter les boutons Modifier et Supprimer
                        if (SessionManager.getRole().equals(Role.RH.name())) {
                            // Bouton Modifier
                            Button btnModifierEvent = new Button("Modifier");
                            btnModifierEvent.getStyleClass().add("btn-modifierEvent");
                            btnModifierEvent.setOnAction(event -> {
                                try {
                                    FXMLLoader loader = new FXMLLoader(getClass().getResource("/ModifierEvenement.fxml"));
                                    Parent root = loader.load();

                                    ModifierEvenementController modifierController = loader.getController();
                                    modifierController.initData(evenement);

                                    Stage popupStage = new Stage();
                                    popupStage.setTitle("Modifier l'√âv√©nement");
                                    popupStage.setScene(new Scene(root));
                                    popupStage.initModality(Modality.APPLICATION_MODAL);
                                    popupStage.showAndWait();

                                    reloadEvenementsList();
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
                            });

                            // Bouton Supprimer
                            Button btnSupprimerEvent = new Button("Supprimer");
                            btnSupprimerEvent.getStyleClass().add("btn-supprimerEvent");
                            btnSupprimerEvent.setOnAction(event -> {
                                try {
                                    Alert alertConfirmation = new Alert(Alert.AlertType.CONFIRMATION);
                                    alertConfirmation.setTitle("Confirmation");
                                    alertConfirmation.setHeaderText("Voulez-vous vraiment supprimer cet √©v√©nement ?");
                                    alertConfirmation.setContentText("Cette action est irr√©versible.");

                                    if (alertConfirmation.showAndWait().get() == ButtonType.OK) {
                                        int eventId = evenement.getIdEvent();
                                        serviceEvenement.supprimer(eventId);
                                        observableList.remove(evenement);

                                        Alert alert = new Alert(Alert.AlertType.INFORMATION);
                                        alert.setTitle("Succ√®s");
                                        alert.setHeaderText("Suppression r√©ussie");
                                        alert.setContentText("L'√©v√©nement a √©t√© supprim√© avec succ√®s.");
                                        alert.showAndWait();
                                    }
                                } catch (SQLException e) {
                                    Alert alert = new Alert(Alert.AlertType.ERROR);
                                    alert.setTitle("Erreur");
                                    alert.setHeaderText("Erreur lors de la suppression");
                                    alert.setContentText("Erreur : " + e.getMessage());
                                    alert.showAndWait();
                                }
                            });

                            hboxButtons.getChildren().addAll(btnModifierEvent, btnSupprimerEvent);
                            vbox.getChildren().add(hboxButtons);
                        }

                        // Appliquer le style au VBox
                        vbox.getStyleClass().add("hbox-item");
                        setGraphic(vbox);
                    }
                }

            });
        } catch (SQLException e) {
            System.out.println("Erreur : " + e.getMessage());
        }
    }

    @FXML
    public void OnajouterEvent(ActionEvent actionEvent) {
        try {
            // Charger le fichier FXML du formulaire d'ajout
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/AjouterEvenement.fxml"));
            Parent root = loader.load();

            // Cr√©er une nouvelle sc√®ne
            Stage popupStage = new Stage();
            popupStage.setTitle("‚ûï Ajouter un √âv√©nement");
            popupStage.setScene(new Scene(root));

            // Emp√™cher l'interaction avec la fen√™tre principale tant que la popup est ouverte
            popupStage.initModality(Modality.APPLICATION_MODAL);

            // Afficher la popup
            popupStage.showAndWait();

            // Rafra√Æchir la liste des √©v√©nements apr√®s la fermeture du popup
            reloadEvenementsList();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void reloadEvenementsList() {
        ServiceEvenement serviceEvenement = new ServiceEvenement();
        try {
            List<Evenement> evenementList = serviceEvenement.afficher();
            observableList = FXCollections.observableList(evenementList);
            lv_event.setItems(observableList);
        } catch (SQLException e) {
            System.out.println("Erreur : " + e.getMessage());
        }
    }

    @FXML
    public void OnchercherEvent(ActionEvent actionEvent) throws SQLException {
        //R√©cup√©ration du texte de recherche+supprime les espaces inutiles au d√©but et √† la fin du texte saisi.
        String searchText = txtRechercheEvent.getText().trim();
        ServiceEvenement serviceEvent = new ServiceEvenement();
        List<Evenement> allEvenement = serviceEvent.afficher();
        //Collecte les r√©sultats filtr√©s dans une nouvelle liste filteredEvenement.
        List<Evenement> filteredEvenement = allEvenement.stream()
                .filter(e -> e.getNomEvent().toLowerCase().contains(searchText.toLowerCase()))
                .collect(Collectors.toList());

        updateFormationListView(filteredEvenement);
    }

    private void updateFormationListView(List<Evenement> filteredEvenement) {
        ObservableList<Evenement> observableList = FXCollections.observableArrayList(filteredEvenement);
        lv_event.setItems(observableList);
    }
}